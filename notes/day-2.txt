1. dotnet core

	open source
	cross platform
	better performance
	modular 
	microservices (minimal api)
	cloud ready
	extensible

	- Core FX library: some in the system and rest in the github repo
	- Core CLR
		.net core runtime
		asp.net core runtime
		desktop runtime
	- roslyn compilers

C:\Program files\dotnet\...
source code: github/dotnet

dotnet cli:
	>dotnet --list-sdks
	>dotnet new --list
	>dotnet new <app-type>[console|library|...] --name <app-name> --framework [netcoreapp3.1|netcoreapp5|netcoreapp6|..]
	
	[in the app directory]
	>dotnet build
	>dotnet run or >dotnet bin/debug/[netcoreapp3.1|net5|net6|..]/<dll-name>.dll

app files in bin/debug/netcoreappX folder:
	- an exe file
	- a dll file (assembly)
	- *.runtimeconfig.json
	- *.runtimeconfig.dev.json
	- *.deps.json
	- *.pdb

Note: No AssemblyInfo.cs/vb file
	
2. asp.net core:
app files in the app directory
	- appsettings.json
	- appsettings.development.json
	- Properties folder
		- launchsettings.json
	- Program.cs

app files in bin/debug/netcoreappX folder
	- an exe file
	- a dll file (assembly)
	- *.runtimeconfig.json
	- appsettings.json
	- appsettings.development.json
	- *.deps.json
	- *.pdb

asp.net core:
	- start up
	- host
	- servers
	- configuration (options pattern)
	- dependency injection (services)
	- middleware
	- environments => development, prouction and staging
	- logging
	- routing
	- handling errors

types of application:
	- web applications
		- Razor pages
		- MVC
		- Blazor
		- client-side apps (angular/react/...)
	- web apis (MC)
	- minimal apis
	- real time apps
		- SignalR
	- rpc apps
		- gRpc

front-end
	- asp.net core mvc 
		- views
		- controllers
		- models
		- filters
		- routing
		- exceptions
		- logging
backend
	- asp.net core web api
		- actions
		- libaries:
			- business layer
			- data access layer
				- repository pattern
			- DTO (data transfer object)
				- business entities [Poco]

interface
	- entiy framework core (code first approach)
		- fluent api
		- data annotation
		- migration

database
	- sql server

authentication
	jwt autentication

dockerized => docker image => yml file
azure => container service



Host
	=> background work (hosted service)
	=> encapsulate app features
		- DI
		- Logging
		- Http Request processing
		- configure the middleware pipeline
		- configuration
	=> and lifetime functionalities

Host:
	web host (backward compatibilty)
	.net core generic host (2.1 => 3.0)	
	.net core minimal host


.net core generic host (2.1 => 3.0)
IHostBuilder builder =  Host.CreateDefaultBuilder();
IHostBuilder => configuration for the host
	builder.AddHostedService()
	builder.UseKestrel()

IHost host = builder.Build()
hots.Run() or RunAsync()

CreateDefaultBuilder:
	set the content root to the path returned by GetCurrentDirectory()
	loads host configuration from 
		- environment variables (prefixed by DOTNET_.)
		- command line arguments
	loads app configuration from
		- appsettings.json
		- appsettings.development.json
		- environment variables (prefixed by DOTNET_.)
		- command line arguments
		- Secret Manager when the app runs in the development mode
	
	adds the logging service providers
		- console
		- debug
		- eventsource
		- eventlog (in windows)

	enables scope validation and dependency validation (in development)

Hosted Service: => IHostedService
			=> StartAsync
			=> StopAsync

you have to regster the hosted service with the service conatiner's collection of hosted services
when the host starts, host will create instance of hosted service (Sample), will call StartAsync on each implementation of the hosted service 
you might turn off (close) the host. the service will stop it's work. at that time StopAsync will be called.
now the service instance will be disposed


IHostApplicationLifetime: handle post startup and graceful shutdown of the host
	ApplicationStarted
	ApplicationStopping
	ApplicationStopped

IHostLifetime: controls when the host strats and when it shuts down

public interface IHostLifetime
{
    Task WaitForStartAsync(CancellationToken cancellationToken);
    Task StopAsync(CancellationToken cancellationToken);
}

IHostEnvironment: class to get certain information about host
			- application name
			- contrnet root path
			- content froot file provider
			- environment name

IApplicationBuilder => builds your application


middleware:
	s/w assembled into request pipeline to handle requests and respones
	-> chooses whether to pass the request to the next middleware in the pipeline 
	-> Can perform something before and after the next middleware

RequestDelegate is used to build the request pipeline.
is used to handle http requests
RequestDelagate are congigured using
 - Use
 - Run
 - Map
extension methods

cane be written inside a class
in-line anonymous methods


class M
{
	function(){}
}

ASP.NET Core MVC or Razor pages:
	Request 
		=> Exception handler 
		=> HSTS
		=> HttpsRedirection
		=> Static files
		=> Routing [app.UseRouting()]
		=> CORS
		=> Authentication
		=> Authorization 
		=> Custom middlewares => Endpoint











	